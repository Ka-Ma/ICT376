--Using Git--

==To Start==
Navigate to a location for git to make the project directory 
Open git bash in that location, in my setup I can right-click and select "Git Bash Here" from the context menu. I haven’t used git GUI so I can't tell you how that works.
Type: git clone [url] // where url is found on GitHub at green “clone or download” button
git will copy the project into a folder of that name and automatically initialise git in that folder
Type: cd [folder]
You will be in the master branch, do not make any changes in this branch.

==To Work==
Any branches you make on your local machine will not be shared by default.
Make a new branch by typing: git checkout -b [branchName]
To move to an existing branch type: git checkout [branchName] // this can include a branch shared by someone else but not yet on your local respository
If it is a branch that someone else made and shared type: git checkout -b [localBranchName] origin/[branchName] //localBranchName and branchName can be the same or different.
You can view a list of local branches by typing: git branch
you can delete a branch by typing: git branch –d [branchName] (it won't let you delete if there is work in this branch that has not be preserved in master somehow, if you want to force it use -D)
work away, commit often so you can revert if you make a lots of typing mistake, this is how you commit:
type: git status
and git add [fileName] or git add . (to add all modified)
of modified files you want to add to the commit
type: git commit
and a edit view will pop up to edit commit message type “i" to type message (something like "changed all ints to doubles" <esc> when finished then type “:x” <enter> to close editing
if you want to share a branch to double check work or what ever type: git push origin [branchName].

==Adding Stable code to Master==
When all the work you have done is stable and you want to add it to master, do the following process:
in your branch: git fetch origin (makes sure your computer knows about the latest master on the repository)
git rebase origin/master (makes it so this branch is now branched from the latest master)
//to squash all your commits into one
git reflog [branchName] // to view the hash numbers of the commits for this branch, find the one related to the first rebase onto ###### is the # you want 
git rebase -i [hash number of origin/master, first 6 digits should be enough]
edit screen: (press <i> to start editing, keep one pick and change the others to "s")
<esc> when finished then ":x" <enter> to close editing
second editing screen will open with all commit comments, follow instructions to have a single explanatory comment for the overall branch work.
<esc> when finished then ":x" <enter> to close editing
type: git push origin HEAD:master // to make this commit the new HEAD of the master branch
type: git checkout master // it will warn you that your local is behind
type: git pull // it will update everything on your local master to the same as the repository
you can choose to delete the branch you were working on as all of that is now safely in the master
to do so type: git branch -d [branchName]
CAUTION: the branch needs to be deleted from everywhere otherwise if you create another branch by the same name github will think you're talking about the branch that still resides there.
